\#
\# groff-mom source for Honours Project report
\#
\# ===================================================================
\#
\# Metadata
\#
.TITLE "TODO Determine Title"
.AUTHOR "Shane Bishop"
.ATTRIBUTE_STRING ""
.PRINTSTYLE TYPESET
\#
\# This determines what goes on the the cover page
.DOC_COVER TITLE AUTHOR
\#
\# Set up Table of Contents
\#
.AUTO_RELOCATE_TOC
.SPACE_TOC_ITEMS
\#
\# Have captions after labels
\#
.CAPTION_AFTER_LABEL IMG
.CATPION_AFTER_LABEL TBL
\#
\# Use numbered footnotes
\#
.FOOTNOTE_MARKER_STYLE NUMBER
\# Set headings to be numbered
.HEADING_STYLE 1 NUMBER
.HEADING_STYLE 2 NUMBER
.HEADING_STYLE 3 NUMBER
.HEADING_STYLE 4 NUMBER
.HEADING_STYLE 5 NUMBER
\#
\# Pull the custom implementation of PDF_LINK macro from ~/pdf-link.tmac
\# For details, refer to previous email correspondence with Peter Schaffter
\#
.rm PDF_LINK
.mso pdf-link.tmac
\# Set indent for quoting
.QUOTE_INDENT 1
.\" Make QUOTE look like CODE
.\" .QUOTE_STYLE \
.\"   FAMILY C \
.\"   FONT   B \
.\"   SIZE   +1.5 \
.\"   COLOR  dark-grey \
.\"   INDENT 9p
.\"
.\" Color for code snippets
.CODE_STYLE \
  FONT  B \
  SIZE  115 \
.CONDENSE 87 \" Condense percentage used in COD
.\" Strings for inline code
.ds cod  \E*[CODE]\&\E*[COND]
.ds codx \E*[CONDX]\E*[CODE off]\&
\#
\# Use Palatino instead of default Times Roman font
\# If Palatino is unavailable, use Times Roman font
\# TODO Currently doesn't work, but have a question for this: https://unix.stackexchange.com/questions/630457/using-palatino-font-with-groff-mom-macros
\#.FAMILY P
\#.FALLBACK_FONT TR
\#
.START
\#
.HEADING 1 NAMED abstract "Abstract"
.PP
Placeholder text
\#
.HEADING 1 NAMED intro "Introduction"
.PP
Placeholder text
\#
.HEADING 1 NAMED techologies "Tools and Technologies"
.PP
The Dental Appointments system is a full-stack webapp, consisting of a
frontend, backend server, and database. Each layer of the application has
its own tests as appropriate for the language or framework being used for
that layer. This section will describe all of the tools and techologies
employed by this system in terms of both implementation and testing.
.HEADING 2 NAMED technologies_frontend "Frontend"
.PP
The frontend is written in JavaScript using the
.PDF_WWW_LINK https://reactjs.org/ "React"
library. Unit tests for the react code were written using the
.PDF_WWW_LINK https://jestjs.io/ "Jest"
JavaScript testing framework.
.HEADING 2 NAMED technologies_backend "Backend"
.PP
The backend server is written in Python using the
.PDF_WWW_LINK https://www.djangoproject.com/ "Django"
framework. An
additional Python library called
.PDF_WWW_LINK https://www.django-rest-framework.org/ "Django REST framework"
was used to simplify the code for writing the REST APIs.
.PP
The Django framework includes its own built-in testing framework. The API
tests for the backend are written using this built-in testing framework.
.HEADING 2 NAMED technologies_database "Database"
.PP
The database uses the
.PDF_WWW_LINK https://www.postgresql.org/ "PostgreSQL"
relational database management system.
However, the Django framework used in the backend abstracts away all of the
details of PostgreSQL (or any alternative database management system), which
means no actual PostgreSQL code was written "by hand" for this project.
.HEADING 2 NAMED technologies_deployment "Deployment"
.PP
The system is spun up using Docker and \*[cod]docker-compose\*[codx].
.PP
.PDF_WWW_LINK https://www.docker.com/ "Docker"
is a container technology that allows for running an application
under controlled and isolated conditions, often used for fast and easy
application development and deployment. Docker supports reproducible builds,
and any Docker "image" can be rebuilt from the same specification.
.PP
.CODE
.PDF_WWW_LINK https://docs.docker.com/compose/ "docker-compose"
.CODE OFF
is a Docker tool that uses declarative code to define the
deployment of a system consisting of several individual Docker containers.
.HEADING 2 NAMED technologies_acceptance "Acceptance Testing"
.PP
Acceptance tests are written using the
.PDF_WWW_LINK https://robotframework.org/ "Robot Framework"
test automation
framework. Robot Framework is a test automation framework written in Python.
The acceptance tests also use
.PDF_WWW_LINK https://www.selenium.dev/ SUFFIX , "Selenium"
an open source framework for automated testing with a real web browser.
.HEADING 3 NAMED technologies_robot "Robot Framework Overview"
.PP
Placeholder text
\#
.NEWPAGE
.HEADING 1 NAMED use_cases "Use Cases"
.HEADING 2 NAMED use_case_diagrams "Use Case Diagrams"
\#
\# Tables are really complicated, and use difficult to read stuf...
\# To really understand how this works, read chapter 5 of "Unix Text Processing"
\# in detail up to at least page 177 (inclusive).
\# Unix Text Processing: https://drive.google.com/file/d/128T-HMKbnDeYnLFzi714fZwytYsswS1z/view?usp=sharing
\# Also a good read is http://www.snake.net/software/troffcvt/tbl.html,
\# which for example covers the comma stuff below under 'Alternative notation'
\#
.TS BOXED LABEL "Table 1: Use Case 1"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC1
_
Title@Login
_
Participating actor(s)@Dental staff member or client
_
Precondition(s)@System is ready to receive requests
_
Parameters@Username, password
_
T{
Flow of events
T}@1. System prompts for username and password
^@2. User submits their username and password
^@3. System logs the user in
^@4. User is redirected to homepage
_
.TE
\#
.NEWPAGE
.TS BOXED LABEL "Table 2: Use Case 2"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC2
_
Title@Logout
_
Participating actor(s)@Dental staff member or client
_
Precondition(s)@User is logged in
_
Parameters@None
_
T{
Flow of events
T}@1. User clicks Logout button
^@2. System logs the user out
^@3. User is redirected to Logout page
_
.TE
\#
.TS BOXED LABEL "Table 3: Use Case 3"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 3
_
Title@Add new client
_
Participating actor(s)@Dental staff member
_
Precondition(s)@Dental staff member is logged in
_
Parameters@Client name, client address, client email, client phone number
_
T{
Flow of events
T}@1. Staff member selects "Register Client"
^@2. System displays page for adding a new client
^@3. Staff member enters the new client's information, including
^@name, address, email, and phone number
^@4. Staff member submits the client information
^@5. System adds the client's information to the database
^@6. System sends an email to the new client to complete their
^@registration
_
.TE
\#
.NEWPAGE
.TS BOXED LABEL "Table 4: Use Case 4"
tab(@);
lI lB, lI l, lI l,
lI l, ^, ^,
lI l,
lIT l, ^.
_
Use Case Identifier@UC 4
_
Title@Client registration
_
Participating actor(s)@Dental client
_
T{
Precondition(s)
T}@The dental client's information has been added to the system by
^@a dental staff member; the client received an email to complete
^@registration
_
Parameters@Client name, client address, client email, client phone number
_
T{
Flow of events
T}@1. Client clicks on the link to complete registration in their
^@email
^@2. Client enters their username, desired password, and the
^@regisration token they were provided in the email
^@3. System redirects the client to the Login page
_
.TE
\#
.TS BOXED LABEL "Table 5: Use Case 5"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 5
_
Title@Client view appointment
_
Participating actor(s)@Dental client
_
Precondition(s)@Client is logged in
_
Parameters@None
_
T{
Flow of events
T}@1. Client navigates to Appointments page
^@2. System displays all appointments for the client
^@3. Client selects an appointment to view
^@4. System displays appointment details
_
.TE
\#
.NEWPAGE
.TS BOXED LABEL "Table 6: Use Case 6"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 6
_
Title@Staff member view appointment
_
Participating actor(s)@Dental staff member
_
Precondition(s)@Staff member is logged in
_
Parameters@None
_
T{
Flow of events
T}@1. Staff member navigates to Appointments page
^@2. Staff member selects an appointment to view
^@3. System displays appointment details
_
.TE
\#
.TS BOXED LABEL "Table 7: Use Case 7"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 7
_
Title@Staff member edit appointment
_
Participating actor(s)@Dental staff member
_
Precondition(s)@Staff member is logged in
_
Parameters@Date, time, client username, hygienist, operation, extra notes
_
T{
Flow of events
T}@1. Staff member selects an appointment to edit
^@2. Staff member edits the appointment
^@3. Staff member submits their edits
^@4. System stores the changes in the database
_
.TE
\#
.NEWPAGE
.TS BOXED LABEL "Table 8: Use Case 8"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 8
_
Title@Staff member create appointment
_
Participating actor(s)@Dental staff member
_
Precondition(s)@Staff member is logged in
_
Parameters@Date, time, client username, hygienist, operation, extra notes
_
T{
Flow of events
T}@1. Staff member selects "Create Appointment"
^@2. System displays Create Appointment page
^@3. Staff member enters appointment information, including client,
^@hygienist, appointment type, date, time, and extra notes
^@4. System stores the new appointment in the database
_
.TE
\#
.TS BOXED LABEL "Table 9: Use Case 9"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 9
_
Title@Staff member cancel appointment
_
Participating actor(s)@Dental staff member
_
Precondition(s)@Staff member is logged in
_
Parameters@None
_
T{
Flow of events
T}@1. Staff member selects an appointment to cancel
^@2. Staff member selects "Cancel Appointment"
^@3. System deletes the appointment from the database
_
.TE
\#
.NEWPAGE
.TS BOXED LABEL "Table 10: Use Case 10"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 10
_
Title@Client view profile
_
Participating actor(s)@Dental client
_
Precondition(s)@Client is logged in
_
Parameters@None
_
T{
Flow of events
T}@1. Client navigates to Profile page
^@2. System displays the client's profile
_
.TE
\#
.TS BOXED LABEL "Table 11: Use Case 11"
tab(@);
lI lB, lI l, lI l, lI l, lI l
lIT l, ^.
_
Use Case Identifier@UC 11
_
Title@Staff member view profile
_
Participating actor(s)@Dental staff member
_
Precondition(s)@Staff member is logged in
_
Parameters@None
_
T{
Flow of events
T}@1. Staff member navigates to Clients page
^@2. System displays all clients
^@3. Staff member selects a client
^@4. System displays the client's profile
_
.TE
\#
.NEWPAGE
\#
.HEADING 2 "Use Case Activity Diagrams"
\#
.PDF_IMAGE img/uc1.pdf 657p 152p SCALE 70 CAPTION "Figure 1: Activity diagram for UC1"
.PP
.\" Placeholder text
.PDF_IMAGE img/uc2.pdf 345p 61p CAPTION "Figure 2: Activity diagram for UC2"
.PP
.\" Placeholder text
.NEWPAGE
.PDF_IMAGE img/uc3.pdf 517p 301p SCALE 75 CAPTION "Figure 3: Activity diagram for UC3"
\# .ALD 301p
.PP
.\" Placeholder text
.NEWPAGE
.PDF_IMAGE img/uc4.pdf 536p 459p SCALE 75 CAPTION "Figure 4: Activity diagram for UC4"
.PP
.\" Placeholder text
.PDF_IMAGE img/uc5.pdf 431p 54p CAPTION "Figure 5: Activity diagram for UC5"
.PP
.\" Placeholder text
.PDF_IMAGE img/uc6.pdf 335p 63p CAPTION "Figure 6: Activity diagram for UC6"
.PP
.\" Placeholder text
.PDF_IMAGE img/uc7.pdf 531p 539p SCALE 75 CAPTION "Figure 7: Activity diagram for UC7"
.PP
.\" Placeholder text
.NEWPAGE
.PDF_IMAGE img/uc8.pdf 533p 456p SCALE 75 CAPTION "Figure 8: Activity diagram for UC8"
.PP
.\" Placeholder text
.PDF_IMAGE img/uc9.pdf 323p 54p CAPTION "Figure 9: Activity diagram for UC9"
.PP
.\" Placeholder text
.PDF_IMAGE img/uc10.pdf 243p 65p CAPTION "Figure 10: Activity diagram for UC10"
.PP
.\" Placeholder text
.PDF_IMAGE img/uc11.pdf 423p 63p CAPTION "Figure 11: Activity diagram for UC11"
.PP
.\" Placeholder text
\#
.NEWPAGE
.HEADING 1 NAMED testing "Testing"
.HEADING 2 NAMED testing_frontend "Frontend Testing"
.PP
As stated in
.PDF_LINK technologies_frontend SUFFIX , "\[sc]*"
the unit tests for the React frontend were written using the Jest
JavaScript testing framework. This section will not attempt to exhaustively
cover the features and usage details for this framework, as that is what
the
.PDF_WWW_LINK https://jestjs.io/docs/en/getting-started.html "Jest docs"
are for; rather, this section will describe the details necessary to
understand the Jest tests for this project.
.PP
Jest tests can be executed either by using \*[cod]jest\*[codx] or, if
\*[cod]react-scripts\*[codx] is installed, with
\*[cod]react-scripts test\*[codx]. The Jest test driver will search the
directory tree to find all files with names that match either the
\*[cod]*.test.js\*[codx] or \*[cod]*.spec.js\*[codx] pattern. Each of the
files matching one of these two patterns will then be executed by the Jest
test driver, and once execution is complete, the results are displayed.
.PP
Test files to be executed by Jest consist of \*[cod]describe()\*[codx],
\*[cod]it()\*[codx], \*[cod]test()\*[codx], and \*[cod]expect()\*[codx]
functions.
.PP
The \*[cod]describe()\*[codx] function simply provides a short
description of all of the tests inside it. Each \*[cod]it()\*[codx] and
\*[cod]test()\*[codx] constitutes a single test case. Test cases usually
have one or more assertion. Assertions are provided using
\*[cod]expect\*[codx]s. The full set of assertions provided by Jest can be
found
.PDF_WWW_LINK https://jestjs.io/docs/en/expect SUFFIX . "here"
.PP
Jest provides multiple ways to provide mocks. Mocks can be provided for
both JavaScript functions and classes. Full documentation for mocking
JavaScript ES6 classes can be accessed
.PDF_WWW_LINK https://jestjs.io/docs/en/es6-class-mocks SUFFIX . "here"
In this project, only some of these mocking methods were employed.
.PP
Jest can be told to mock a JavaScript module by first importing the module
and then calling \*[cod]jest.mock()\*[codx] on the module. For example, to
mock the \*[cod]axios\*[codx] module, first the module would be imported
as
.QUOTE
.CODE
import axios from 'axios';
.QUOTE OFF
then after all imports, \*[cod]jest.mock()\*[codx] would be called using
.QUOTE
.CODE
jest.mock('axios');
.QUOTE OFF
.PP
To cause a function in a mocked module to return a specific value, this
can be done using the \*[cod]mockResolvedValue()\*[codx] function. For
example, the \*[cod]axios.get()\*[codx] function can be mocked as follows:
.QUOTE
.CODE
const response = {/* Some predetermined desired response */};
axios.get.mockResolvedValue(response);
.QUOTE OFF
Then a call to \*[cod]axios.get()\*[codx] will return the specific response.
.PP
Functions defined by a module or class can also be replaced with a mock
implementation. For example, suppose we have the following JavaScript ES6
class:
.QUOTE
.CODE
class User {
    static isLoggedIn() {
        // Some implementation here
    }

    // Other functions
}
.QUOTE OFF
If we want to mock the \*[cod]static\*[codx] \*[cod]isLoggedIn()\*[codx]
function in a Jest test, we can do so like this:
.QUOTE
.CODE
User.isLoggedIn = jest.fn(() => {
    // Mock implementation here
});
.QUOTE OFF
.PP
For full-fledged examples of mocking with Jest, see
.PDF_WWW_LINK https://github.com/shanebishop/dental-appointment/blob/master/frontend/src/pages/pages/Appointments.test.js Appointments.test.js
and
.PDF_WWW_LINK https://github.com/shanebishop/dental-appointment/blob/master/frontend/src/routes/index.test.js index.test.js
in the GitHub repository for this project. See also following Jest
documentation pages:
.LIST
.SHIFT_LIST 2P+2p
.ITEM
.PDF_WWW_LINK https://jestjs.io/docs/en/mock-functions "Mocking Functions"
.ITEM
.PDF_WWW_LINK https://jestjs.io/docs/en/es6-class-mocks "JavaScript ES6 Class Mocks"
.ITEM
.PDF_WWW_LINK https://jestjs.io/docs/en/manual-mocks "Manual Mocking"
.LIST OFF
.HEADING 2 NAMED testing_backend "Backend Testing"
.PP
As stated in
.PDF_LINK technologies_backend SUFFIX , "\[sc]*"
the API tests for the backend were written using
Django's built-in testing framework. This built-in framework is further
augmented by the Django REST framework library, which includes Python
classes that allows for tests to be more expressed more clearly and
concisely.
.PP
The two Django REST framework classes used in the API tests are
.CODE
.PDF_WWW_LINK https://www.django-rest-framework.org/api-guide/testing/#api-test-cases APITestCase
.CODE OFF
and
.CODE
.PDF_WWW_LINK https://www.django-rest-framework.org/api-guide/testing/#apiclient SUFFIX . APIClient
.CODE OFF
\*[cod]APIClient\*[codx] is simply an HTTP client for making HTTP
requests. Responses can be analyzed for correctness. The
\*[cod]APITestCase\*[codx] class is a subclass of Django's
.CODE
.PDF_WWW_LINK https://docs.djangoproject.com/en/3.1/topics/testing/tools/#testcase TestCase
.CODE OFF
class where each instance of the class has a
\*[cod]APIClient\*[codx] instance.
.PP
Django's \*[cod]TestCase\*[codx] class is itself a subclass of
Python's built-in
.CODE
.PDF_WWW_LINK https://docs.python.org/3/library/unittest.html#unittest.TestCase unittest.TestCase
.CODE OFF
class. The
\*[cod]TestCase\*[codx] class, in addition to several assert functions,
defines the
.CODE
.PDF_WWW_LINK https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp setUp()
.CODE OFF
and
.CODE
.PDF_WWW_LINK https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown tearDown()
.CODE OFF
functions. The \*[cod]setUp()\*[codx] function is called before the
execution of each test function defined in a \*[cod]TestCase\*[codx],
and the \*[cod]tearDown()\*[codx] function is called after the
execution of each test function in a \*[cod]TestCase\*[codx].
.PP
Helper functions can also be defined in a \*[cod]TestCase\*[codx]
class. To differentiate between helper functions and functions that
execute tests, all functions that execute tests must have function names
with the \*[cod]test\*[codx] prefix.\c
.FOOTNOTE
If desired, the prefix for a test function can be changed from the default
.CODE
test
.CODE OFF
to a different value, by using the
.CODE
.PDF_WWW_LINK https://docs.python.org/3/library/unittest.html#unittest.TestLoader.testMethodPrefix "unittest.TestLoader.testMethodPrefix"
.CODE OFF
.FOOTNOTE OFF
 If a function has a name that
does not begin with this prefix, it will not be executed as a test, and
will not contribute to the number of passing or failing tests.
.PP
For each API implemented in the Django backend, there is a corresponding
API test. Let us look at an example.
.NEWPAGE
.QUOTE
.CODE
def test_create_user(self):
    username = 'user1'
    data = generate_valid_user_data(username)

    response = self.client.post(
        RegisterUserAPITests.URL, data)
    self.assertIs(response.status_code, status.HTTP_200_OK)

    user = User.objects.get(username=username)
    user_data = UserData.objects.get(user=user)

    self.assertEqual(user.first_name, data['firstName'])
    self.assertEqual(user.last_name, data['surname'])
    self.assertEqual(user.email, data['email'])
    self.assertEqual(user_data.address1, data['address1'])
    self.assertEqual(user_data.address2, data['address2'])
    self.assertEqual(user_data.city, data['city'])
    self.assertEqual(user_data.province, data['province'])
    self.assertEqual(
        user_data.postalCode, data['postalCode'])
.QUOTE OFF
.PP
The function above is a test function, as indicated by the fact that its
name begins with the \*[cod]test\*[codx] prefix. From the name of the
function, it is clear that the action of creating a user is being tested.
First, valid user data is generated using a helper function (the code for
the helper function is omitted here for simplicity). Then the valid data
is sent to the URL for registering users using an HTTP POST request. The
HTTP response is stored in the \*[cod]response\*[codx] variable.
.PP
Next, there is an assert to test that the response's status code is the
HTTP 200 status code. If the assert fails, this test function would be
marked as failed, and no further assertions in the body of this function
would be executed.
.PP
To test the user was created successfully in the database, the data in the
database is retrieved with
.QUOTE
.CODE
user = User.objects.get(username=username)
user_data = UserData.objects.get(user=user)
.QUOTE OFF
Finally, all attributes of the data in the database is verified against
the data sent in the POST request with the remaining
\*[cod]assertEqual()\*[codx] asserts. If any assertion fails, this
test will fail.
.HEADING 2 NAMED testing_acceptance "Acceptance Testing"
.PP
Placeholder text
\#
\# This needs to be the very last macro
.TOC
